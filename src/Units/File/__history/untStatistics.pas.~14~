unit untStatistics;
interface
uses
  System.SysUtils, Windows, System.IOUtils, Vcl.Dialogs, untConstants;
type
  TUserInfo = record
    FUserName: ShortString;
    FLoginTime: TDateTime;
    FLogoutTime: TDateTime;
    FExpressionCalcAmount: Integer;
    FDeterminantCalcAmount: Integer;
    FInverseCalcAmount: Integer;
    FRankCalcAmount: Integer;
    FDeterminantMatrChangeAmount: Integer;
    FInverseMatrChangeAmount: Integer;
    FRankMatrChangeAmount: Integer;
  end;
procedure SaveStatistics(const AUserInfo: TUserInfo);
function LoadStatistics(const AFilePath: string): TUserInfo;
procedure ClearUserInfo(var UserInfo: TUserInfo);
function FormatStatistics(const AUserInfo: TUserInfo): string;
function SecondsBetween(const ANow, AThen: TDateTime): Integer;
function GetWindowsUserName: string;
implementation
  const
    constMaxCount = 142;
    constStatisticsName = 'Statistics';
  function SecondsBetween(const ANow, AThen: TDateTime): Integer;
  begin
    Result := Round((ANow - AThen) * 86400);
  end;
  function CountFilesWithExtension(const AFolderPath: string): Integer;
  var
    SearchRec: TSearchRec;
    ResultCode: Integer;
  begin
    Result := 0;
    ResultCode := FindFirst(AFolderPath + '\*' + constExtStat, faAnyFile, SearchRec);
    try
      while ResultCode = 0 do
      begin
        if (SearchRec.Name <> '.') and (SearchRec.Name <> '..') and
           (SearchRec.Attr and faDirectory = 0) then
          Inc(Result);
        ResultCode := FindNext(SearchRec);
      end;
    finally
      FindClose(SearchRec.FindHandle);
    end;
  end;
  procedure DeleteFilesWithExtension(const AFolderPath: string);
  var
    SearchRec: TSearchRec;
    ResultCode: Integer;
  begin
    ResultCode := FindFirst(AFolderPath + '\*' + constExtStat, faAnyFile, SearchRec);
    try
      while ResultCode = 0 do
      begin
        if (SearchRec.Name <> '.') and (SearchRec.Name <> '..') and
           (SearchRec.Attr and faDirectory = 0) then
          DeleteFile(PWideChar(AFolderPath + '\' + SearchRec.Name));
        ResultCode := FindNext(SearchRec);
      end;
    finally
      FindClose(SearchRec.FindHandle);
    end;
  end;
  procedure SaveStatistics(const AUserInfo: TUserInfo);
  var
    Count: Integer;
    UserInfoFile: file of TUserInfo;
    AppDataPath: string;
  begin
    AppDataPath := IncludeTrailingPathDelimiter(ExtractFilePath(ParamStr(0))) + dirAppData;

    if not TDirectory.Exists(AppDataPath) then
      TDirectory.CreateDirectory(AppDataPath);
    Count:= CountFilesWithExtension(AppDataPath);
    if Count >= constMaxCount then
    begin
      DeleteFilesWithExtension(AppDataPath);
      Count:= 0;
    end;
    AppDataPath := TPath.Combine(AppDataPath, constStatisticsName +'_'+ IntToStr(Count) + constExtStat);
    AssignFile(UserInfoFile, AppDataPath);
    Rewrite(UserInfoFile);
    try
      Write(UserInfoFile, AUserInfo);
    finally
      CloseFile(UserInfoFile);
    end;
  end;
  function LoadStatistics(const AFilePath: string): TUserInfo;
  var
    UserInfoFile: file of TUserInfo;
  begin
    AssignFile(UserInfoFile, AFilePath);
    Reset(UserInfoFile);
    try
      Read(UserInfoFile, Result);
    except
      ShowMessage('Statistic file is not found');
    end;
    CloseFile(UserInfoFile);
  end;
  function FormatStatistics(const AUserInfo: TUserInfo): string;
  begin
    Result := 'User Name: ' + AUserInfo.FUserName + sLineBreak;
    if AUserInfo.FLoginTime = 0 then
      Result := Result + 'Login Time: None' + sLineBreak
    else
      Result := Result + 'Login Time: ' + FormatDateTime('dd/MM/yyyy HH:mm:ss', AUserInfo.FLoginTime) + sLineBreak;
    if AUserInfo.FLogoutTime = 0 then
      Result := Result + 'Logout Time: None' + sLineBreak
    else
      Result := Result + 'Logout Time: ' + FormatDateTime('dd/MM/yyyy HH:mm:ss', AUserInfo.FLogoutTime) + sLineBreak;

    Result := Result +
              'Expression Calculate Amount: ' + IntToStr(AUserInfo.FExpressionCalcAmount) + sLineBreak +
              'Determinant Calculate Amount: ' + IntToStr(AUserInfo.FDeterminantCalcAmount) + sLineBreak +
              'Inverse Calculate Amount: ' + IntToStr(AUserInfo.FInverseCalcAmount) + sLineBreak +
              'Rank Calculate Amount: ' + IntToStr(AUserInfo.FRankCalcAmount) + sLineBreak +
              'Detrminant Input Matrix Change Amount: ' + IntToStr(AUserInfo.FDeterminantMatrChangeAmount) + sLineBreak +
              'Inverse Input Matrix Change Amount: ' + IntToStr(AUserInfo.FInverseCalcAmount) + sLineBreak +
              'Detrminant Input Matrix Change Amount: ' + IntToStr(AUserInfo.FRankMatrChangeAmount);

  end;
  function GetWindowsUserName: string;
  var
    UserName: array[0..255] of Char;
    UserNameLen: DWORD;
  begin
    UserNameLen := SizeOf(UserName);
    if GetUserName(UserName, UserNameLen) then
      Result := UserName
    else
      Result := '';
  end;
  procedure ClearUserInfo(var UserInfo: TUserInfo);
  begin
    FillChar(UserInfo, SizeOf(UserInfo), 0);
  end;
end.
