unit Matrix;

interface

type
  TMatrix = class
    private
      FLinesAmount: Integer;
      FColumnsAmount: Integer;
    public
      FName: string;
      FElements: array of array of Real;
      Constructor Create(const AName: String; const ALines, AColumns: Integer);
      Destructor Destroy; override;
  end;

  Function SumMatrixes(const AFirstMatr, ASecondMatr: TMatrix): TMatrix;
  Function SubMatrixes (const AFirstMatr, ASecondMatr: TMatrix): TMatrix;
  Function MultConstMatrix(const ANumb: Real; const AFirstMatr: TMatrix): TMatrix;
  Function MultMatrixes(const AFirstMatr, ASecondMatr: TMatrix): TMatrix;


implementation
  Constructor TMatrix.Create(const AName: String; const ALines, AColumns: Integer);
  var
    i, j: integer;
  begin
    FName := AName;
    FLinesAmount := ALines;
    FColumnsAmount := AColumns;

    SetLength(FElements, ALines + 10);
    for i := 0 to ALines + 10 do
    begin
      SetLength(FElements[i], AColumns + 10);
      for j := 0 to AColumns + 10 do
        FElements[i][j] := 0;
    end;
  end;

  Destructor TMatrix.Destroy;
  var
    i: integer;
  begin
    for i := 0 to High(FElements) do
      SetLength(FElements[i], 0);
  end;

  //Procedure for summing two m  atrixes
  Function SumMatrixes(const AFirstMatr, ASecondMatr: TMatrix): TMatrix;
  var
    i, j: integer;
    //i, j - iterators for cycles
  Begin
    Result := TMatrix.Create('Res', AFirstMatr.FLinesAmount, AFirstMatr.FColumnsAmount);

    //Summing the matrixes
    for i := 0 to AFirstMatr.FLinesAmount - 1 do
      for j := 0 to AFirstMatr.FColumnsAmount - 1 do
        Result.FElements[i][j] := AFirstMatr.FElements[i][j] + ASecondMatr.FElements[i][j];
  End;

  //Procedure for substract two matrixes
  Function SubMatrixes (const AFirstMatr, ASecondMatr: TMatrix): TMatrix;
  var
    i, j: integer;
    //i, j - iterators for cycles
  Begin
    //Substract the matrixes
    for i := 1 to AFirstMatr.FLinesAmount do
      for j := 1 to AFirstMatr.FColumnsAmount do
        Result.FElements[i][j] := AFirstMatr.FElements[i][j] - ASecondMatr.FElements[i][j];
  End;

  //Procedure for multiplying number on matrix
  Function MultConstMatrix(const ANumb: Real; const AFirstMatr: TMatrix): TMatrix;
  var
    i, j: integer;
    //i, j - iterators for cycles
  Begin
    //Myltiplying number on matrix
    for i := 1 to AFirstMatr.FLinesAmount do
      for j := 1 to AFirstMatr.FColumnsAmount do
        Result.FElements[i][j] := ANumb * AFirstMatr.FElements[i][j];
  End;

  //Procedure for multiplying matrixes
  Function MultMatrixes(const AFirstMatr, ASecondMatr: TMatrix): TMatrix;
  var
    i, j, k: integer;
    //i, j, k - iterators for cycles
  Begin
    //Myltiplying the matrixes
    for i := 1 to AFirstMatr.FLinesAmount do
      for j := 1 to ASecondMatr.FColumnsAmount do
      begin
        Result.FElements[i][j] := 0;
        for k := 1 to AFirstMatr.FColumnsAmount do
          Result.FElements[i][j] := Result.FElements[i][j] + AFirstMatr.FElements[i][k] * ASecondMatr.FElements[k][j];
      end;
  End;
end.
