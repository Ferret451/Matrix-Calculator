unit SingleLinkedList;

interface

uses
  System.SysUtils;

type

  TSingleLinkedList<T> = class

  private
  type
    PNode = ^TNode;
    TNode = record
      FValue: T;
      FNext: PNode;
    end;

  private
    FHead: PNode;
    FTail: PNode;
    FSize: Integer;

  public
    constructor Create();
    destructor Destroy(); override;

    procedure Add(const AValue: T);
    procedure Remove(const AValue: T);
    procedure SwapValues(const AFirstIndex, ASecondIndex: Integer);
  end;

implementation

  constructor TSingleLinkedList<T>.Create();
  begin
    FHead := nil;
    FTail := nil;
    FSize := 0;
  end;

  destructor TSingleLinkedList<T>.Destroy();
  var
    Node, NextNode: PNode;
  begin
    Node := FHead;
    while Assigned(Node) do
      begin
        NextNode := Node.FNext;
        Dispose(Node);
        Node := NextNode;
      end;
    inherited;
  end;

  procedure TSingleLinkedList<T>.Add(const AValue: T);
  var
    NewNode: PNode;
  begin

    New(NewNode);

    with NewNode^ do
    begin
      FValue := AValue;
      FNext := nil;
    end;

    if FTail <> nil then
      FTail^.FNext := NewNode
    else
      FHead := NewNode;

    FTail := NewNode;

    Inc(FSize);
  end;

  procedure TSingleLinkedList<T>.Remove(const AValue: T);
  begin

  end;
end.
