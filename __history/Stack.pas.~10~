unit Stack;

interface

Type
  TStack<T> = class

  Private
  Type
  PStackSegment = ^TStackSegment;
  TStackSegment = record
    Value: T;
    Next: PStackSegment;
  end;

  Private


  Public
    FTop: PStackSegment;
    FSize: Integer;
    Constructor Create;
    Destructor Destroy; override;
    Procedure Push(const AValue: T);
    Function Top: T;
    Function Pop: T;
    Function Size: Integer;
    Function IsEmpty: Boolean;

  end;

implementation
  Constructor TStack<T>.Create;
  begin
    FSize := 0;
    FTop := nil;
  end;

  Destructor TStack<T>.Destroy;
  begin
    while not IsEmpty do
      Pop;
    inherited;
  end;

  Procedure TStack<T>.Push (const AValue: T);
  Var
    Segment: PStackSegment;
  begin
    New(Segment);
    Segment.Value := AValue;
    Segment.Next := FTop;
    FTop := Segment;
    Inc(FSize);
  end;

  Function TStack<T>.Top: T;
  begin
    Result := FTop.value;
  end;

  Function TStack<T>.Pop: T;
  Var
    Segment: PStackSegment;
  begin
    Segment := FTop;
    Result := Segment.Value;
    FTop := Segment.Next;
    Dispose(Segment);
    Dec(FSize);
  end;

  Function TStack<T>.Size: integer;
  begin
    Result := FSize;
  end;

  Function TStack<T>.IsEmpty: boolean;
  begin
    if (FSize = 0) then
      Result := True
    else
      Result := False;
  end;
end.



