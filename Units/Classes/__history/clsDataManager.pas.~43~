unit clsDataManager;

interface

uses
  Vcl.ExtCtrls, clsMatrixList, clsMatrix, untTypes;

type
  TPaintProc = procedure(Sender: TObject);

  TDataManager = class
  private
    FCurrentExpression: TFullExpression;
    FMatrixList: TMatrixList;
    FOperationStatement: TOperationStatement;  //Napisat get set

    function GetProblemString(): string;
    procedure SetProblemString(const AProblemString: string);
    function GetCurrentExpressionAnswer(): TOperand;
    procedure SetCurrentExpressionAnswer(const ACurrentExpressionAnswer: TOperand);
  public
    constructor Create();
    destructor Destroy(); override;

    procedure CallBack(Sender: TObject);

    property MatrixList: TMatrixList read FMatrixList;
    property CurrentExpressionString: string read GetProblemString
      write SetProblemString;
    property CurrentExspressionAnswer: TOperand read GetCurrentExpressionAnswer
      write SetCurrentExpressionAnswer;
    property OperationStatement: TOperationStatement read FOperationStatement
      write FOperationStatement;
  end;

var
  DataManager: TDataManager;

implementation

constructor TDataManager.Create();
begin
  FMatrixList := TMatrixList.Create();
end;

destructor TDataManager.Destroy();
begin
  FMatrixList.Destroy();

  inherited;
end;

procedure TDataManager.CallBack(Sender: TObject);
begin
  TPaintBox(Sender).OnPaint(TPaintBox(Sender));;
end;

function TDataManager.GetProblemString(): string;
begin
  Result := FCurrentExpression.FProblemString;
end;

procedure TDataManager.SetProblemString(const AProblemString: string);
begin
  FCurrentExpression.FProblemString := AProblemString;
end;

function TDataManager.GetCurrentExpressionAnswer(): TOperand;
begin
  Result := FCurrentExpression.FAnswer;
end;

procedure TDataManager.SetCurrentExpressionAnswer(const ACurrentExpressionAnswer: TOperand);
begin
  FCurrentExpression.FAnswer := ACurrentExpressionAnswer;
end;

end.
