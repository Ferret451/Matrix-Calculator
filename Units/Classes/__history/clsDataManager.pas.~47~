unit clsDataManager;

interface

uses
  Vcl.ExtCtrls, clsMatrixList, clsMatrix, untTypes;

type
  TPaintProc = procedure(Sender: TObject);

  TDataManager = class
  private
    FCurrentExpression: TFullOperation;
    FCurrentDeterminant: TFullOperation;
    FCurrentInverse: TFullOperation;
    FCurrentRank: TFullOperation;
    FOperationStatement: TOperationStatement;

    FMatrixList: TMatrixList;

    function GetCurrentExpression(): TFullOperation;
    function GetCurrentDeterminant(): TFullOperation;
    function GetCurrentInverse(): TFullOperation;
    function GetCurrentRank(): TFullOperation;

    procedure SetProblemString(const AProblemString: string);
    procedure SetCurrentExpressionAnswer(const ACurrentExpressionAnswer: TAnswer);

  public
    constructor Create();
    destructor Destroy(); override;

    procedure CallBack(Sender: TObject);

    property MatrixList: TMatrixList read FMatrixList;

    property CurrentExpression: TFullOperation read GetCurrentExpression;
    property CurrentDeterminant: TFullOperation read GetCurrentDeterminant;
    property CurrentInverse: TFullOperation read GetCurrentInverse;
    property CurrentRank: TFullOperation read GetCurrentRank;
    property CurrentProblemString: string write SetProblemString;
    property CurrentProblemMatrix: TMatrix write SetProblemMatrix;
    property CurrentAnswer: TAnswer write SetAnswer;

    property OperationStatement: TOperationStatement read FOperationStatement
      write FOperationStatement;
  end;

var
  DataManager: TDataManager;

implementation

constructor TDataManager.Create();
begin
  FMatrixList := TMatrixList.Create();
end;

destructor TDataManager.Destroy();
begin
  FMatrixList.Destroy();

  inherited;
end;

procedure TDataManager.CallBack(Sender: TObject);
begin
  TPaintBox(Sender).OnPaint(TPaintBox(Sender));;
end;

procedure TDataManager.SetProblemString(const AProblemString: string);
begin
  FCurrentExpression.FProblemString := AProblemString;
end;

procedure TDataManager.SetCurrentExpressionAnswer(const ACurrentExpressionAnswer: TOperand);
begin
  FCurrentExpression.FAnswer := ACurrentExpressionAnswer;
end;

end.
