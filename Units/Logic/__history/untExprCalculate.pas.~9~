unit untExprCalculate;

interface

uses
  System.SysUtils, clsStack, clsMatrix, untConstants;

var
  OperandStack: TStack<string>;
  OperatorStack: TStack<Char>;

  function ExprCalculation(AExpression: string): string;

implementation

procedure SpacesRemove(var AExpression: string);
var
  i: Integer;
begin
  i := 1;
  while i <= Length(AExpression) do
  begin
    if AExpression[i] = ' ' then
      Delete(AExpression, i, 1)
  end;
end;

function GetNewPriority(const AOperator: Char): ShortInt;
begin
  case AOperator of
    'A'..'Z', 'a'..'z', '0'..'9':
      Result := 7;
    '+', '-':
      Result := 1;
    '*', '/':
      Result := 3;
    '^':
      Result := 6;
    '(':
      Result := 9;
    ')':
      Result := 0;
    else
      Result := -1;
  end;
end;

function GetStackPriority(const AOperator: Char): ShortInt;
begin
  case AOperator of
    'A'..'Z', 'a'..'z', '0'..'9':
      Result := 8;
    '+', '-':
      Result := 2;
    '*', '/':
      Result := 4;
    '^':
      Result := 5;
    '(':
      Result := 0;
    else
      Result := -1;
  end;
end;

procedure OperandProcessing(var PointerPos: Integer; const Expression: string; var OperandStack: TStack<string>);
var
  Operand: string;
begin

end;

procedure OperatorProcessing(var OperandStack: TStack<string>; var OperatorStack: TStack<Char>);
var
  FirstOperand, SecondOperand: TMatrix;
begin

end;

function ExprCalculation(AExpression: string): string;
var
  i: Integer;
begin
  OperandStack := TStack<string>.Create;
  OperatorStack := TStack<Char>.Create;

  SpacesRemove(AExpression);

  OperandStack.Destroy;
  OperatorStack.Destroy;
end;


end.
