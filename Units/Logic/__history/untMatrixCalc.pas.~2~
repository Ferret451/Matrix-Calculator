unit untMatrixCalc;

interface

uses
  clsMatrix;

implementation

//Function for summing two matrixes
function SumMatrixes(const AFirstMatr, ASecondMatr: TMatrix<Extended>):
  TMatrix<Extended>;
var
  i, j: Integer;
  //i, j - iterators for cycles
begin
  Result := TMatrix<Extended>.Create(AFirstMatr.LinesAmount,
    AFirstMatr.ColumnsAmount);

  //Summing the matrixes
  for i := 0 to AFirstMatr.LinesAmount - 1 do
    for j := 0 to AFirstMatr.ColumnsAmount - 1 do
      Result.Elements[i, j] := AFirstMatr.Elements[i, j] +
        ASecondMatr.Elements[i, j];
end;

//Function for substract two matrixes
function SubstrMatrixes(const AFirstMatr, ASecondMatr: TMatrix<Extended>):
  TMatrix<Extended>;
var
  i, j: Integer;
  //i, j - iterators for cycles
begin
  Result := TMatrix<Extended>.Create(AFirstMatr.LinesAmount,
    AFirstMatr.ColumnsAmount);

  //Substract the matrixes
  for i := 0 to AFirstMatr.LinesAmount - 1 do
    for j := 0 to AFirstMatr.ColumnsAmount - 1 do
      Result.Elements[i, j] := AFirstMatr.Elements[i, j] -
        ASecondMatr.Elements[i, j];
end;

//Function for multiplying number on matrix
function TMatrix<T>.MultConst(const ANumb: Extended): TMatrix<T>;
var
  i, j: Integer;
  //i, j - iterators for cycles
begin
  Result := TMatrix<T>.Create(Self.FLinesAmount, Self.FColumnsAmount);

  //Myltiplying number on matrix
  for i := 0 to Self.FLinesAmount - 1 do
    for j := 0 to Self.FColumnsAmount - 1 do
      Result.FElements[i][j] := ANumb * Self.FElements[i][j];
end;

//Function for division matrix on number
function TMatrix<T>.DivConst(const ANumb: Extended): TMatrix<T>;
var
  i, j: Integer;
  //i, j - iterators for cycles
begin
  Result := TMatrix<T>.Create(Self.FLinesAmount, Self.FColumnsAmount);

  //Myltiplying number on matrix
  for i := 0 to Self.FLinesAmount - 1 do
    for j := 0 to Self.FColumnsAmount - 1 do
      Result.FElements[i][j] := Self.FElements[i][j];
end;

//Function for multiplying matrixes
function TMatrix<T>.MultMatr(const AMatr: TMatrix<T>): TMatrix<T>;
var
  i, j, k: Integer;
  //i, j, k - iterators for cycles
begin
  Result := TMatrix<T>.Create(Self.FLinesAmount, AMatr.FColumnsAmount);

  //Myltiplying the matrixes
  for i := 0 to Self.FLinesAmount - 1 do
    for j := 0 to AMatr.FColumnsAmount - 1 do
    begin
      Result.FElements[i][j] := 0;
      for k := 0 to Self.FColumnsAmount - 1 do
        Result.FElements[i][j] := Result.FElements[i][j] + Self.FElements[i][k] * AMatr.FElements[k][j];
    end;
end;

end.
